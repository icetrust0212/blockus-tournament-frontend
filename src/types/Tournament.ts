/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface TournamentInterface extends utils.Interface {
  functions: {
    "currencyAddress()": FunctionFragment;
    "endTournament(address,address,address)": FunctionFragment;
    "enterTournament()": FunctionFragment;
    "entryPrice()": FunctionFragment;
    "isUserRegistered(uint256,address)": FunctionFragment;
    "numPlayers(uint256)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "players(uint256,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setCurrencyAddress(address)": FunctionFragment;
    "setEntryPrice(uint256)": FunctionFragment;
    "setTicketNFT(address,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "ticketNFT()": FunctionFragment;
    "ticketNFTId()": FunctionFragment;
    "tournamentId()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "currencyAddress"
      | "endTournament"
      | "enterTournament"
      | "entryPrice"
      | "isUserRegistered"
      | "numPlayers"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "owner"
      | "players"
      | "renounceOwnership"
      | "setCurrencyAddress"
      | "setEntryPrice"
      | "setTicketNFT"
      | "supportsInterface"
      | "ticketNFT"
      | "ticketNFTId"
      | "tournamentId"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "currencyAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endTournament",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "enterTournament",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "entryPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isUserRegistered",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "numPlayers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrencyAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEntryPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTicketNFT",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "ticketNFT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ticketNFTId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tournamentId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "currencyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endTournament",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterTournament",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "entryPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isUserRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "numPlayers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrencyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEntryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTicketNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ticketNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ticketNFTId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tournamentId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "CurrencySet(address)": EventFragment;
    "EntryPriceSet(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TicketNFTSet(address,uint256)": EventFragment;
    "TournamentEnded(uint256,address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CurrencySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EntryPriceSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TicketNFTSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TournamentEnded"): EventFragment;
}

export interface CurrencySetEventObject {
  currency: string;
}
export type CurrencySetEvent = TypedEvent<[string], CurrencySetEventObject>;

export type CurrencySetEventFilter = TypedEventFilter<CurrencySetEvent>;

export interface EntryPriceSetEventObject {
  price: BigNumber;
}
export type EntryPriceSetEvent = TypedEvent<
  [BigNumber],
  EntryPriceSetEventObject
>;

export type EntryPriceSetEventFilter = TypedEventFilter<EntryPriceSetEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TicketNFTSetEventObject {
  ticket: string;
  ticketId: BigNumber;
}
export type TicketNFTSetEvent = TypedEvent<
  [string, BigNumber],
  TicketNFTSetEventObject
>;

export type TicketNFTSetEventFilter = TypedEventFilter<TicketNFTSetEvent>;

export interface TournamentEndedEventObject {
  tournamentId: BigNumber;
  first: string;
  second: string;
  third: string;
}
export type TournamentEndedEvent = TypedEvent<
  [BigNumber, string, string, string],
  TournamentEndedEventObject
>;

export type TournamentEndedEventFilter = TypedEventFilter<TournamentEndedEvent>;

export interface Tournament extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TournamentInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    currencyAddress(overrides?: CallOverrides): Promise<[string]>;

    endTournament(
      first: PromiseOrValue<string>,
      second: PromiseOrValue<string>,
      third: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enterTournament(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    entryPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    isUserRegistered(
      _tournamentId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    numPlayers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    players(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCurrencyAddress(
      _newCurrency: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEntryPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTicketNFT(
      _ticket: PromiseOrValue<string>,
      _tickeTokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    ticketNFT(overrides?: CallOverrides): Promise<[string]>;

    ticketNFTId(overrides?: CallOverrides): Promise<[BigNumber]>;

    tournamentId(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  currencyAddress(overrides?: CallOverrides): Promise<string>;

  endTournament(
    first: PromiseOrValue<string>,
    second: PromiseOrValue<string>,
    third: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enterTournament(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  entryPrice(overrides?: CallOverrides): Promise<BigNumber>;

  isUserRegistered(
    _tournamentId: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  numPlayers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  onERC1155BatchReceived(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>[],
    arg3: PromiseOrValue<BigNumberish>[],
    arg4: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>,
    arg4: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  players(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCurrencyAddress(
    _newCurrency: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEntryPrice(
    _price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTicketNFT(
    _ticket: PromiseOrValue<string>,
    _tickeTokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  ticketNFT(overrides?: CallOverrides): Promise<string>;

  ticketNFTId(overrides?: CallOverrides): Promise<BigNumber>;

  tournamentId(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    currencyAddress(overrides?: CallOverrides): Promise<string>;

    endTournament(
      first: PromiseOrValue<string>,
      second: PromiseOrValue<string>,
      third: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    enterTournament(overrides?: CallOverrides): Promise<void>;

    entryPrice(overrides?: CallOverrides): Promise<BigNumber>;

    isUserRegistered(
      _tournamentId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    numPlayers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    players(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setCurrencyAddress(
      _newCurrency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEntryPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTicketNFT(
      _ticket: PromiseOrValue<string>,
      _tickeTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ticketNFT(overrides?: CallOverrides): Promise<string>;

    ticketNFTId(overrides?: CallOverrides): Promise<BigNumber>;

    tournamentId(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CurrencySet(address)"(
      currency?: PromiseOrValue<string> | null
    ): CurrencySetEventFilter;
    CurrencySet(
      currency?: PromiseOrValue<string> | null
    ): CurrencySetEventFilter;

    "EntryPriceSet(uint256)"(price?: null): EntryPriceSetEventFilter;
    EntryPriceSet(price?: null): EntryPriceSetEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "TicketNFTSet(address,uint256)"(
      ticket?: PromiseOrValue<string> | null,
      ticketId?: null
    ): TicketNFTSetEventFilter;
    TicketNFTSet(
      ticket?: PromiseOrValue<string> | null,
      ticketId?: null
    ): TicketNFTSetEventFilter;

    "TournamentEnded(uint256,address,address,address)"(
      tournamentId?: PromiseOrValue<BigNumberish> | null,
      first?: null,
      second?: null,
      third?: null
    ): TournamentEndedEventFilter;
    TournamentEnded(
      tournamentId?: PromiseOrValue<BigNumberish> | null,
      first?: null,
      second?: null,
      third?: null
    ): TournamentEndedEventFilter;
  };

  estimateGas: {
    currencyAddress(overrides?: CallOverrides): Promise<BigNumber>;

    endTournament(
      first: PromiseOrValue<string>,
      second: PromiseOrValue<string>,
      third: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enterTournament(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    entryPrice(overrides?: CallOverrides): Promise<BigNumber>;

    isUserRegistered(
      _tournamentId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numPlayers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    players(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCurrencyAddress(
      _newCurrency: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEntryPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTicketNFT(
      _ticket: PromiseOrValue<string>,
      _tickeTokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ticketNFT(overrides?: CallOverrides): Promise<BigNumber>;

    ticketNFTId(overrides?: CallOverrides): Promise<BigNumber>;

    tournamentId(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    currencyAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endTournament(
      first: PromiseOrValue<string>,
      second: PromiseOrValue<string>,
      third: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enterTournament(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    entryPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isUserRegistered(
      _tournamentId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numPlayers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    players(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCurrencyAddress(
      _newCurrency: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEntryPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTicketNFT(
      _ticket: PromiseOrValue<string>,
      _tickeTokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ticketNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ticketNFTId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tournamentId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
